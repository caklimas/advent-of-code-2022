use std::{collections::HashMap, result};

pub fn calculate_score() -> u32 {
    let score_calculator = ShapeScoreCalculator::new();
    let line_split = DATA.split('\n');
    let mut score = 0;
    for line in line_split {
        let split = line.split(' ').collect::<Vec<&str>>();
        let opponent_choice = split[0];
        let player_choice = split[1];
        score = score + score_calculator.get_score(opponent_choice, player_choice);
    }

    score
}

pub fn calculate_outcome_score() -> u32 {
    let score_calculator = ShapeScoreCalculator::new();
    let line_split = DATA.split('\n');
    let mut score = 0;
    for line in line_split {
        let split = line.split(' ').collect::<Vec<&str>>();
        let opponent_choice = split[0];
        let player_outcome_choice = split[1];
        score = score + score_calculator.get_outcome_score(opponent_choice, player_outcome_choice);
    }

    score
}

pub struct ShapeScoreCalculator<'a> {
    shape_mapping: HashMap<&'a str, Shape>,
    shape_scores: HashMap<Shape, u32>,
    outcome_mapping: HashMap<&'a str, Outcome>,
    outcome_scores: HashMap<Outcome, u32>,
}

impl<'a> ShapeScoreCalculator<'a> {
    pub fn new() -> Self {
        Self {
            shape_mapping: HashMap::from([
                ("A", Shape::Rock),
                ("B", Shape::Paper),
                ("C", Shape::Scissor),
                ("X", Shape::Rock),
                ("Y", Shape::Paper),
                ("Z", Shape::Scissor),
            ]),
            shape_scores: HashMap::from([(Shape::Rock, 1), (Shape::Paper, 2), (Shape::Scissor, 3)]),
            outcome_mapping: HashMap::from([
                ("X", Outcome::Lose),
                ("Y", Outcome::Draw),
                ("Z", Outcome::Win),
            ]),
            outcome_scores: HashMap::from([
                (Outcome::Win, 6),
                (Outcome::Lose, 0),
                (Outcome::Draw, 3),
            ]),
        }
    }

    pub fn get_score(&self, opponent_choice: &str, player_choice: &str) -> u32 {
        let opponent_shape = self
            .shape_mapping
            .get(opponent_choice)
            .expect("Can't find opponent shape");
        let player_shape = self
            .shape_mapping
            .get(player_choice)
            .expect("Can't find player shape");
        let player_shape_score = self
            .shape_scores
            .get(player_shape)
            .expect("Can't find score for shape");
        let result_score: u32 = match (opponent_shape, player_shape) {
            (Shape::Rock, Shape::Rock) => *self
                .outcome_scores
                .get(&Outcome::Draw)
                .expect("Can't find outcome score"),
            (Shape::Rock, Shape::Paper) => *self
                .outcome_scores
                .get(&Outcome::Win)
                .expect("Can't find outcome score"),
            (Shape::Rock, Shape::Scissor) => *self
                .outcome_scores
                .get(&Outcome::Lose)
                .expect("Can't find outcome score"),
            (Shape::Paper, Shape::Rock) => *self
                .outcome_scores
                .get(&Outcome::Lose)
                .expect("Can't find outcome score"),
            (Shape::Paper, Shape::Paper) => *self
                .outcome_scores
                .get(&Outcome::Draw)
                .expect("Can't find outcome score"),
            (Shape::Paper, Shape::Scissor) => *self
                .outcome_scores
                .get(&Outcome::Win)
                .expect("Can't find outcome score"),
            (Shape::Scissor, Shape::Rock) => *self
                .outcome_scores
                .get(&Outcome::Win)
                .expect("Can't find outcome score"),
            (Shape::Scissor, Shape::Paper) => *self
                .outcome_scores
                .get(&Outcome::Lose)
                .expect("Can't find outcome score"),
            (Shape::Scissor, Shape::Scissor) => *self
                .outcome_scores
                .get(&Outcome::Draw)
                .expect("Can't find outcome score"),
        };

        result_score + *player_shape_score as u32
    }

    pub fn get_outcome_score(&self, opponent_choice: &str, player_outcome_choice: &str) -> u32 {
        let opponent_shape = self
            .shape_mapping
            .get(opponent_choice)
            .expect("Can't find opponent shape");
        let player_outcome = self
            .outcome_mapping
            .get(player_outcome_choice)
            .expect("Can't find outcome");

        let result_score: u32 = match (opponent_shape, player_outcome) {
            (Shape::Rock, Outcome::Win) => {
                self.get_outcome_shape_score(player_outcome, &Shape::Paper)
            }
            (Shape::Rock, Outcome::Lose) => {
                self.get_outcome_shape_score(player_outcome, &Shape::Scissor)
            }
            (Shape::Rock, Outcome::Draw) => {
                self.get_outcome_shape_score(player_outcome, &Shape::Rock)
            }
            (Shape::Paper, Outcome::Win) => {
                self.get_outcome_shape_score(player_outcome, &Shape::Scissor)
            }
            (Shape::Paper, Outcome::Lose) => {
                self.get_outcome_shape_score(player_outcome, &Shape::Rock)
            }
            (Shape::Paper, Outcome::Draw) => {
                self.get_outcome_shape_score(player_outcome, &Shape::Paper)
            }
            (Shape::Scissor, Outcome::Win) => {
                self.get_outcome_shape_score(player_outcome, &Shape::Rock)
            }
            (Shape::Scissor, Outcome::Lose) => {
                self.get_outcome_shape_score(player_outcome, &Shape::Paper)
            }
            (Shape::Scissor, Outcome::Draw) => {
                self.get_outcome_shape_score(player_outcome, &Shape::Scissor)
            }
        };

        result_score
    }

    fn get_outcome_shape_score(&self, outcome: &Outcome, shape: &Shape) -> u32 {
        self.outcome_scores
            .get(outcome)
            .expect("Can't find outcome score")
            + self
                .shape_scores
                .get(shape)
                .expect("Can't find shape score")
    }
}

#[derive(PartialEq, Eq, Hash)]
pub enum Shape {
    Rock,
    Paper,
    Scissor,
}

#[derive(PartialEq, Eq, Hash)]
pub enum Outcome {
    Win,
    Lose,
    Draw,
}

const DATA: &str = "A Y
B Z
C Y
B Y
A Y
A Y
A X
A Y
B Z
A Y
B Y
A Z
A Y
C Z
A Z
A Y
B Y
A Y
A Y
B Z
A Z
C Y
A X
B Z
B Z
B Y
A Y
A Y
B Z
B Z
B Z
B Z
A Y
C Z
A X
B Z
B Z
B Y
B Z
A Y
B Y
B Z
B Y
A Y
B Y
B Z
B Z
A Y
B Y
A Y
C Y
B Y
C X
A Y
A Y
B Z
A Y
B Y
A Y
B Z
A Z
B Y
A Y
A Z
A Y
B X
A Z
A Y
B Z
B X
A Y
B Y
A Y
B Z
A Y
B Z
A Z
B Z
A Y
A Y
A X
B Y
C Z
C Y
B Y
A X
A Z
C X
A Z
A Z
A Y
B Z
A Z
A Z
A Y
B Y
A Y
C X
B Z
A Y
C Z
A Y
A Z
A Y
A Y
A Z
A Y
C Z
A Y
A Y
B Z
C Y
B Z
C Z
C Z
B Z
B X
C Z
A Y
C X
A Y
A Z
B Z
A Y
A Z
A Y
B Z
B Z
B Y
A Z
A Z
A Y
A Y
A Z
B Y
A Y
B Y
A X
B Z
A Y
B X
B Z
B Y
A Z
C Y
C Y
A Z
A Z
A Y
A X
B Z
A Z
B Y
B Y
A Y
A Z
B Y
B Z
A Y
A Z
A Z
B Y
A Y
B Y
A Z
A Y
A Z
A Y
B Y
A Y
B Y
B Z
B Z
A Z
B Z
B Y
A Y
A Z
B Y
A Z
A Z
B Y
C Y
B Z
A Z
A Y
A Y
A Z
B Z
C X
A Z
A Y
A Y
B Y
A Y
B Z
A Z
B Z
B Z
A X
C Z
A Z
A Y
A Y
A Y
A Y
B Y
A Y
C Z
B Z
C Y
B Y
B Z
C Z
B Z
A Y
B Z
A Y
A Y
B Z
A Y
B Z
A Y
B Z
A Y
A X
A X
B Z
C Z
B Z
B Z
A Y
C Y
B Z
A Y
B Z
B Y
B Y
A Y
B Z
A Z
C Y
B Z
B Y
B Z
B Y
B Z
A Z
A Y
A Y
A Z
A Y
B Z
A Y
A Y
B Y
A Y
B Z
B Z
B Z
B Z
C X
A Y
A Z
C Z
A Z
A Z
A Z
A Y
B Z
A Z
A Y
B Z
A Y
A Y
A Z
B Z
A Y
A Y
A X
A Z
B Z
A Y
A Z
C Z
A Z
A Y
B Y
B Y
B Y
A Y
A Y
B Y
A Y
B Y
A X
B Y
B X
A Z
C Y
B Y
A Y
A Z
A Y
B Y
A Y
B Y
B Y
A Z
A Y
A Y
B Z
A X
B Z
B Z
A Z
A Z
A Z
A Z
B Y
B Z
B Y
B Z
B Y
B Z
A X
C Z
C Z
B Y
B Z
A Y
A Y
A Y
A Y
C Z
C Z
A Y
C Z
A Z
A Z
A Y
A Y
A Y
A Y
A Y
B Z
A Z
A Y
A Y
A Y
A Y
A Y
B Z
C X
B Z
A Y
B Z
A Y
B Z
A Z
B Z
A Y
C Z
B Y
A Y
B Z
A Z
C X
A Y
A Y
A Y
A Y
A Z
A Y
B Z
B Y
C Z
B X
A X
B Z
B Y
C Z
A Y
C X
A Y
A Z
B Y
B Y
C Z
A Y
A Y
B Y
A Y
A Y
A Y
B Z
B Y
A Y
A Z
B Y
A Y
A Z
A Z
B Y
A Z
B Y
A Z
B Z
B X
B Z
A X
B Z
B Z
A Y
B X
A Y
A Y
A Z
A X
A Y
A Y
A Y
B Y
C X
A Y
A Z
B Z
A Y
A Z
B Z
A Y
A Z
A Y
C X
A Y
B Z
B Y
B Y
B Y
B Y
A X
A Y
A X
B Y
A X
B Z
A Y
A Y
B Z
C Z
A Y
C Z
A Y
A X
A Y
A Z
B Z
B Z
C Y
B Z
B Y
A X
B Z
B Y
A Y
A Y
A Y
B Z
B Y
B Y
C Y
B Y
B Y
A Y
A Y
B Z
B Z
B Y
A Y
A Z
C Y
A Y
C Y
A Y
A Y
B Y
C Y
C Y
B Y
B Y
A Z
A Y
B Z
B Z
A Y
A Y
A Y
B Z
B Y
A Y
A Y
A Y
A Z
A Z
B Y
A Z
B Z
B Z
B Y
B Y
A Y
B Z
B Z
C X
B X
C Z
A Y
A X
B Z
A Z
B Y
B Y
B Z
B Z
A Y
A Y
B Y
B Z
A Y
A Z
A Z
B Y
C X
A Z
A X
B Z
A Y
A Y
B Y
B Z
B Z
B Y
C Z
C Z
A Y
A Z
A Z
B Y
A Y
A Z
C Y
A Y
A Y
A Z
C Y
B Z
A Z
A Y
A Z
A Y
B Y
A Z
B Z
A Z
A Z
C Z
A Y
A Z
B Z
B Z
A Z
B Z
B Y
B Y
B Y
A Y
A Y
A Z
A Y
A Y
A Y
B Z
A Z
B X
B Z
B Z
A Y
A Y
A Y
A Y
A Z
B Y
B Y
C Z
A Y
B Z
A Y
B Z
A Y
A Y
A Y
B Z
C Y
B Z
B Z
A Y
A Y
A Y
A Y
A Y
B Y
A Y
C X
B Y
A Y
A Y
B Z
A Z
A Y
B Y
A Y
B Y
A Y
B Y
B Z
B Z
B Y
A Z
C Z
C Z
A Y
A Y
B Y
A Y
C Z
A Y
B Y
B Z
A Y
A Y
B Z
B Y
C Z
B Z
B Y
A Z
B Y
A Y
B Y
A X
A Y
A Z
B Y
B Z
C Y
B Y
B Z
A Y
A Y
B Z
A Y
B Z
A Z
B Z
C Z
A Z
A Y
A Y
A Y
A Z
A Y
B Z
B Z
B Y
C Z
A Y
B Z
A Y
A Y
A Y
B Y
B Z
C Y
B Z
C Z
A Z
A X
B Y
B Z
B Y
B Y
B Z
A Y
A Y
C X
A Y
A Y
A Z
A Y
B Y
A Y
C Z
C Z
A Z
A Y
A Z
A Y
A Y
A Y
A Z
A Z
B Z
A Z
A Z
B Y
A Y
B Y
A Y
A Y
A X
B Z
C Z
C Z
A Y
A Z
C Z
A X
C X
B X
C Z
A Y
B Z
B Z
B Y
B Z
B Z
A Y
C X
B Y
B Y
B Y
C Y
A Y
A Y
B Y
A Z
C X
C X
A Y
A Z
B Y
B Y
A Y
B Y
A Y
C Y
B Z
A Y
B Z
A Z
A Y
B Y
B Z
B Y
A Z
A Z
A Z
A Z
A Y
A Z
B Y
A Y
B Y
A Y
B Y
A Y
B X
A Y
B Y
A Y
A Y
C Z
C Z
B Z
A Z
B Z
A Y
A Y
C Z
B Z
B Z
A Y
A Y
B Z
A Z
B Z
A Z
A Z
A Y
B Y
A Z
B Z
B Z
A Y
A Y
C Y
B Y
A Y
C Y
B Y
B X
A Y
B Y
A Y
B Y
B Y
C Y
B Z
A Y
B Y
B Y
B Y
A Y
A Y
B Z
B Y
A Y
B Y
B Y
A Y
B Y
A Y
A Z
C X
B Z
A Y
A Z
B Z
A Y
A Y
C Z
A Z
C Y
B Y
A Z
B X
A Z
B Y
B Z
C Z
A X
C Z
B Y
A Z
A Y
B Y
B Y
C Y
B Y
A Y
A Z
B Y
B Z
A Y
B Y
B Z
C Z
B Y
C Z
A X
A Y
A X
B Z
A Z
A Z
B X
B Y
C Y
B Y
A Z
B Y
C Z
A Z
A Y
A Y
C Z
B Y
A Y
C Z
A Y
B Z
A Y
B Z
B Y
A Y
B Z
C Y
C Z
C Z
A Y
C Z
A Z
A Y
B Y
B Z
C Z
A Y
A Y
B Y
B Y
A Y
B Z
A Y
B Y
B Z
B Z
A Y
A Y
B Z
C Z
C Y
B Y
C Z
A Y
B Y
A Y
C Z
A Y
B Z
B Y
A Y
B X
B Y
A Z
B Y
B Z
B Y
A Y
B Z
A Y
A Z
C X
A Y
B Z
A Y
B Y
B Y
B Y
A Y
A Y
C X
B Y
A Y
A Y
B Y
A Y
A Y
A Y
B Y
C Z
B Z
C Z
C Y
C Y
A Y
B Z
A X
B Y
B Y
B Y
A Y
B Z
B Y
B Y
C Z
A Y
B Y
A X
B X
B Y
C Z
B Y
B Y
B Z
B Y
B Z
A Z
A Y
A Y
C X
A Z
A Y
A Y
A Y
A Y
A Z
A Y
A Y
A Y
A X
A Y
B X
B Y
A Y
B Z
A X
C Z
A Y
A Z
A Y
B Z
B Y
A Y
A Y
A Z
A Y
A Y
A Y
A Y
A X
C Z
A Y
A Z
A Y
A Y
B Z
B Y
A Z
B Y
C Y
A Z
A Y
B Y
B Y
B Y
B Y
A Y
B Y
B Z
B Z
B X
B Z
A Z
B Z
B Y
A Z
A Y
A Y
A Y
B Y
B Z
A Y
A Y
A Y
B Y
A Z
A Y
B Y
A Z
A Y
C Y
A Y
B Z
C Z
B Y
C Z
A Y
A Z
B Z
B Y
A Z
A Y
B Y
B Y
A Y
C Z
A Z
A Y
A Y
B X
A Z
C X
C Z
B Z
C Y
B Y
C Z
A Z
B Z
B Y
A Y
B Z
B Y
A Z
B Y
A X
A Z
B Y
B Y
C Z
B Z
C Z
A Z
A Z
C Z
A Y
B Z
B Z
A Z
A X
B Y
A Z
A X
A X
A X
A Y
A Z
A Y
A Z
B Y
B Z
A Y
B Z
C Y
B Z
A Y
A Y
A Y
B Y
A Y
B Y
B Z
C X
B Y
B Y
B X
A Y
A Y
B Z
C Y
B Y
B Y
A Z
A Y
A Z
B Z
A Y
B Y
B Y
A Z
A Y
A X
A Y
C Z
A Y
A Y
C Z
B Z
A Y
A Z
A Z
C Z
A Y
A Z
A Z
A Y
B Y
A Z
B Z
A Y
B Y
A Z
A Y
B Y
A Z
A X
B Y
B X
A Y
B Y
A Z
A Z
B Z
A Z
B Z
A Y
B Y
A Y
B Z
C Z
A Y
A Y
A Y
B Y
A Y
A Z
A Z
B Y
B Y
A Y
B Z
B Y
B Z
A Y
C Y
C X
B Y
B Z
C Z
A Y
B Z
B Y
A Y
B Z
B Z
B Z
B Z
B Y
B Z
A Z
C Z
A Y
B Y
A Y
B Z
A Z
B Z
A Y
B Y
A Z
C Z
A Y
B Z
A Z
B Z
B Z
A Y
A Y
C Y
B Y
A Y
C X
A X
C Z
B Z
A Y
B Y
C Y
B Y
A X
B Y
C Y
B Y
A Y
A Y
B Z
A X
B Y
A Y
B Y
B Z
B Y
B Z
A Y
A Z
A Z
B Z
B Y
B Y
B Z
A X
B Y
A Z
A Y
A Y
A Y
A Y
A Z
A Y
A Z
A Y
A Y
C Y
B Y
A Y
C Z
B Y
A Y
A Y
C Y
A Y
A Y
B Y
B Y
A Y
A Y
B Y
B X
B Y
C Y
B Y
A Y
B X
C X
A Y
B Z
A Y
A Y
B Y
B Y
B Z
A Z
B Y
A Y
A X
A Y
A Z
A Y
B Z
C Z
A Y
A Y
A Y
A Y
A Y
A Y
B Y
A Y
A X
B Y
B Y
B Y
A Y
B Y
B Z
A Y
C Y
A Z
C Z
A Y
B Z
B X
B Z
B Y
A X
C Z
A Y
A Y
A Y
C Z
B Z
C Y
A Y
B Y
B X
A Y
B Y
A Y
A Z
A Y
A X
A Z
A X
C Z
B Y
B Y
B Y
A Y
A Y
C Z
A Y
B Y
A Y
A Y
A Z
C Z
C Z
C Y
C Z
B Y
A Z
B Y
A Y
A Z
A X
C Y
B Y
A Z
B Y
A Y
B Z
C Y
C Z
A Y
A Y
A Z
A Y
A Y
C Y
B Y
B Z
A Y
A Y
B Z
B Z
A Z
B Y
B Y
B Y
C X
B Z
C Y
A Z
B Z
A Y
A Y
A Y
B Z
B Y
A X
B X
A Y
A Y
B Z
C X
C Y
A Y
B Y
B Z
B Z
A Z
A Y
A Y
A Y
B Y
A Y
C Y
A Y
A Y
A Y
B Z
B Z
A Z
A Z
A X
A Y
A X
B Y
B Z
B Y
A X
A X
B Z
B Y
B Y
A Y
B X
C X
B Z
C X
B Y
C Y
B Z
A Y
C Z
A Y
A Y
B Y
A Y
B Y
B Z
A Y
B Y
A Z
C Z
A Y
C Y
A Y
A X
B Z
B Y
C Z
B Z
B Z
B Y
B Z
C Z
A Y
B Y
B Y
B Y
B Z
B Y
B Z
B Y
A Z
B Y
B Z
B Y
A Z
A Y
C X
A Z
A Y
A Z
A Y
A Y
B Y
B Y
A Y
B Y
B Z
B Y
A X
A Z
A Z
A Y
A Z
A X
B Z
B Y
B Z
A Y
C Z
A Y
A Y
A Y
A Y
A Y
C Z
A Y
A Z
B Z
A Z
B Y
A Y
B Y
C Z
B Z
B Z
B Z
B Y
A Z
A Y
C Z
A Y
C Z
A Z
A Y
B Z
A Y
A Y
B Y
B X
B X
A Y
A Y
A Y
A Y
C Z
B Y
A X
A Y
B X
A Y
A Y
A Y
A Z
A Y
C Y
C Y
C Y
A Y
B Z
A Z
C Z
C Y
A Y
A Y
B Y
C X
A Y
A Z
A Y
C Z
A Y
B Y
A Y
A Y
A Z
B Z
B Z
A Y
B Z
A Z
A Y
C Z
B Z
B Z
B Z
A Y
A Y
A Y
B Z
B Y
A Y
B Y
C Z
A Y
A Y
B Z
C Z
A Y
A Z
C X
B Z
A Y
B Y
A Y
A Y
B Z
A Z
C X
B Z
A Y
B Z
A X
A Y
A Y
B Z
B Z
B Y
A Z
A Z
C Y
B Y
A Y
A Y
C X
A Y
A Y
B Y
A Y
A Z
A Y
A Y
A Z
A Y
C Z
A X
A Z
A Y
C Z
A Y
B Y
A Z
A X
B Y
B Y
A Z
A Y
A Y
B Y
B Y
B Y
A Y
B Y
A Y
B Z
A Z
A Z
B Z
A Y
B Y
A Y
B Y
A Y
C Z
A Y
A Z
C Y
B X
B Z
B Z
A Z
B Z
B Y
A Y
A Y
B Z
A Y
B Z
A Y
B Y
A X
A Y
C Z
B Z
B Y
B Y
B Y
B Z
A Y
A Y
B Z
B Y
C Z
B Y
A Y
A Y
B Z
B Y
B Z
B Y
A Y
A Y
A Z
B Z
C Z
A Y
C X
A Z
B Y
B Z
B Y
A Y
B Y
B Y
A X
B Z
A X
A Z
A X
A Y
A Y
A Z
A Z
A Y
C Z
A Y
A X
B Y
B Z
A Y
B Y
A Y
C X
B Y
A Y
B X
B Z
A Z
A Y
B Y
C Z
A Y
C Z
C Y
C Y
B Y
A Y
B Z
A Y
B X
A Z
A Y
B Z
B Z
B Z
A Z
A Z
B Y
B Z
C Y
A Y
A Y
A Y
C X
B Y
B Y
B Y
B Z
A X
A Y
A Z
A Y
C Z
A Y
A Y
C Z
B Y
B Y
A Z
A Z
A X
B X
B Z
B Z
A Z
B Y
C Z
B Y
A X
A Y
B Z
B Y
A Z
C Z
B Y
B Z
C Z
B Z
A Y
C Z
A Y
A Z
B Z
B Z
A Y
B Y
A Z
A Z
A Y
C Z
C Z
A Z
B Y
A Y
A Z
C Z
A Y
C Y
C X
A Y
B Y
A Y
A Z
B X
A Z
A Z
B Y
B Z
B Y
A Y
A Y
B X
B Z
A Y
A Y
B Z
A Y
A Y
B Y
A Y
B Y
C Z
B Y
B Y
A Y
A Y
B X
C X
A Y
A Y
B Z
B Y
B Z
A Y
A Y
C Y
A X
B Z
A Y
A Y
A Y
A Y
C Y
A Y
A Z
A X
B Z
A Y
A Z
B Z
B Z
A Y
B Y
B Y
A Z
B Z
B Z
C Z
A Y
B Z
A Y
B Y
A Y
B Z
C X
B Y
A Y
B Z
A X
C X
B Z
B Z
B Y
A Y
C X
A Y
A Z
B Y
B Z
B Y
A Y
B Y
A Z
B Y
A Z
B Z
A Y
B Y
A Y
A Y
C Z
A Y
B Z
B Y
A Z
C Z
C Z
C Z
A Y
B Y
B Z
B Z
A Y
A Z
B Z
A Y
B Z
B Z
B Z
A X
A Y
A Y
A Y
B Y
B Y
B Z
B Y
B Z
B Z
B Y
B Y
B Z
A Y
A Z
A Z
B Y
A Y
A X
B Z
B Y
B Z
A Y
A Y
A Y
B Y
A Y
A Y
A Z
B Z
A Y
A Y
A Y
A Y
C Z
A X
C Z
B Z
B Z
B Y
A Y
B Y
A Z
A Z
B Z
C Z
B Z
A Z
B X
A Y
A Y
B Y
A Z
B Z
A Y
A Z
A Y
A Y
A Y
A Y
C Y
A Y
B Y
B Z
C X
A Y
B Z
C Z
B Z
B Z
A Z
B Y
B Z
A Z
A Y
B X
B Z
B Z
B Y
B Z
A Y
B Z
B Y
C X
B Y
A Y
B Z
A Z
B X
B Y
B Z
B Z
B Z
B Y
A X
A Y
B Z
A Y
A X
C X
A Y
A X
A Z
B Y
B Z
A Y
B Z
B Z
A Y
B Z
A Y
C X
A X
B X
A Z
C Z
B Z
A Y
B Z
C Z
B Y
A Y
A Y
B Z
A Z
B Y
A X
A Y
A Y
C Z
C Z
C Z
A Y
B Y
A Y
A Y
C Z
A Y
A X
B Z
A Y
C Z
B Y
A X
B Z
A Z
B Y
B Y
A Y
B Y
A Z
B Z
B Z
A Y
A Y
A Z
B Z
C Z
C Z
B Z
A X
B Z
B Z
B Z
A Z
A Z
C Z
A Y
A Y
B Y
B Y
A Z
B Z
A Y
A Y
B Z
A Y
A Z
A Z
B Z
A Z
A Y
A Y
C Y
B Z
A Y
A Z
B Y
A X
A Z
A Y
B Z
A Y
A Y
B Y
B Z
A Z
A Z
A Y
A Z
B Y
C Z
B Y
A Y
C Z
C Y
B Y
A Y
A Z
B Y
B Y
A Y
C Y
C Z
A Y
B Y
A Z
B Z
A Y
C Y
A Y
A Y
B Z
B Y
A Y
C X
A X
B Z
A Z
B Z
B Z
A Y
A Y
B Z
B Z
C Z
C Z
C Z
B Z
A Y
A Y
B Y
B Y
A Y
A Y
A Z
B Y
A Y
A Z
C Y
A Y
C Y
B Z
C Z
B Z
A Y
B Y
A Z
A Z
C Z
B Y
B Z
A Z
A Y
B Y
B Y
C Z
B Y
A Y
A Y
B Y
B Z
A Y
A Y
B X
B Y
B Y
A Y
A Y
A Y
B Y
C X
B Y
A Z
B Z
B Y
B Y
A Z
A Y
A X
B Z
C Z
A Z
C Z
A Y
B Y
B Z
A Y
A Y
A Y
A Z
C X
A Y
A Z
A Y
B Y
A Y
B Z
B Z
B Y
A Y
B Z
C Z
B X
B Y
B Y
B Z
B Y
A X
B Y
A Z
A Y
A Y
A Y
A Z
A Y
B Y
A Y
C Z
B Z
B Y
A Z
A Y
A Z
A Y
A Y
A Y
C Z
B Y
A Z
A Y
B Y
A Y
A Y
A Y
A Y
B Z
A Z
B Y
A Y
B Z
B Z
A Z
A Y
A Y
A Y
A Z
B Y
A Y
B Y
A Z
A Y
B Z
A Y
B Y
B Z
C Y
A Y
A Z
A Z
A Y
A Y
B Z
A Z
A Z
A Y
A Y
A Y
C Y
B Y
B Y
A Z
C Y
C X
B Z
A Y
A Y
C Y
C Z
A Z
C Z
A Z
A Z
B Y
A Y
A Z
A Y
C X
B Y
B Z
C Z
A Y
A X
C Y
B Y
B Y
A Z
A Z
A Z
A Z
C Z
B Y
B Z
A Y
B Z
B Z
A X
C Z
B X
C Z
A X
B Z
A Y
B Z
B Z
A Y
A Y
A X
C X
A Y
A Y
A Y
C Z
A Z
B Y
A Y
A X
A Y
A Y
B Z
A Y
A Y
A Z
B Y
A Y
B X
A X
B Y
A Y
A Y
B Y
B Z
B Z
B Z
A Y
A Z
A Z
A Z
A Y
B Y
C Y
B Y
A Z
A Z
B Y
A Z
A Y
B Z
A Z
C Z
B Y
A Z
B Y
A Y
A Z
A Y
B Y
B Y
A Y
A Z
B Z
B Y
A X
B Y
A Z
B Y
A Y
A Z
B Y
C X
B Z
A Y
C Z
A Y
B X
B Y
A Y
C Z
B X
C X
A Y
A Z
B Z
C Z
B Y
B Y
B Y
A Y
A Y
B Y
B Y
B Y
A Y
B Z
B Z
A Z
A X
A Z
A Z
B Y
A Y
A Y
C Z
A Y
A Y
A Z
B Z
C Z
A Y
B Z
A Z
A Z
B Y
B Y
A Y
A Y
A Y
B Y
B Z
B Z
B Y
B Y
B Z
B Z
C Z
A Y
B Z
B Y
B Y
B Y
A Z
B Z
A Y
B Y
A Z
A Y
A Y";
